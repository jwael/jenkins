
        import io.mockk.every
import io.mockk.mockk
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.multipart.MultipartFile
import com.arval.blm.core.application.usecase.ImportCustomersUseCaseApi
import com.arval.blm.infrastructure.controller.CaixaCustomerImportController
import com.arval.blm.core.domain.model.Referenceld

class CaixaCustomerImportControllerTest {

    private lateinit var importUseCase: ImportCustomersUseCaseApi
    private lateinit var controller: CaixaCustomerImportController

    @BeforeEach
    fun setup() {
        // Mock du UseCase
        importUseCase = mockk(relaxed = true)

        // Injection dans le controller
        controller = CaixaCustomerImportController(importUseCase)
    }

    @Test
    @DisplayName("Should import file and return CREATED")
    fun `import file returns CREATED`() {
        // GIVEN
        val fileMock: MultipartFile = mockk(relaxed = true)
        val fakeReference = Referenceld("0123456789")

        // Mock du comportement du UseCase
        every { importUseCase.invoke(any(), any(), any(), any()) } returns fakeReference

        // WHEN
        val response: ResponseEntity<String> = controller.importFile(fileMock)

        // THEN
        assertEquals(HttpStatus.CREATED, response.statusCode)
        assertEquals("0123456789", response.body)
    }

    @Test
    @DisplayName("Should handle exception and return BAD_REQUEST")
    fun `import file handles exception`() {
        // GIVEN
        val fileMock: MultipartFile = mockk(relaxed = true)

        // Simuler une exception dans le UseCase
        every { importUseCase.invoke(any(), any(), any(), any()) } throws IllegalArgumentException("Invalid file")

        // WHEN
        val response: ResponseEntity<String> = try {
            controller.importFile(fileMock)
        } catch (e: IllegalArgumentException) {
            ResponseEntity(e.message, HttpStatus.BAD_REQUEST)
        }

        // THEN
        assertEquals(HttpStatus.BAD_REQUEST, response.statusCode)
        assertEquals("Invalid file", response.body)
    }
}