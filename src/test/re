import io.mockk.*
import kotlinx.coroutines.runBlocking
import org.junit.jupiter.api.Test
import java.time.Instant
import java.time.LocalDate

class ImportCustomerServiceTest {

    private val recordStepEventRepositorySpi = mockk<RecordStepEventRepositorySpi>(relaxed = true)
    private val crmClsCustomerDataRepositorySpi = mockk<CrmClsCustomerDataRepositorySpi>(relaxed = true)
    private val crmCustomerProviderSpi = mockk<CrmCustomerProviderSpi>(relaxed = true)
    private val batchRepositorySpi = mockk<BatchRepositoryForContactsSpi>(relaxed = true)

    private val service = spyk(
        ImportCustomerService(
            recordStepEventRepositorySpi,
            crmClsCustomerDataRepositorySpi,
            crmCustomerProviderSpi,
            batchRepositorySpi
        )
    )

    // -------------------------
    // 1️⃣ Scénario KO : client avec errorMessage
    // -------------------------
    @Test
    fun `it should save KO event and call batchRepository save when customer has errorMessage`() = runBlocking {
        val batch = LoaderBatch(
            id = "AAAAA",
            reference = ReferenceId("REFKO"),
            fileName = "file.csv",
            triggeredBy = "u00001",
            countryCode = CountryCode("FR"),
            status = LoaderBatchStatus.RUNNING,
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            endDate = Instant.now().plusSeconds(180),
            totalContacts = 1
        )

        val customer = CustomerPayload(
            rowNumber = 1,
            crmData = CrmData(firstName = "Jean", surname = "Dupont", email = "jean.dupont@example.com"),
            clsData = emptyMap(),
            errorMessage = "Erreur détectée"
        )

        every { batchRepositorySpi.save(any()) } answers { firstArg() }

        service.apply(batch, listOf(customer))

        verify(exactly = 0) { crmClsCustomerDataRepositorySpi.save(any()) }
        verify(exactly = 0) { crmCustomerProviderSpi.createCrmCustomer(any()) }
        verify(exactly = 1) {
            recordStepEventRepositorySpi.save(match {
                it.batchId == batch.id &&
                it.rowNumber == customer.rowNumber &&
                it.stepName == RecordStepName.BLM &&
                it.stepStatus == RecordStepStatus.KO
            })
        }
        verify(exactly = 1) { batchRepositorySpi.save(loaderBatch = match { it.id == batch.id }) }
    }

    // -------------------------
    // 2️⃣ Happy Path : création CRM et event OK
    // -------------------------
    @Test
    fun `it should create CRM customer and save event OK when no errorMessage`() = runBlocking {
        val batch = LoaderBatch(
            id = "BBBBB",
            reference = ReferenceId("REFOK"),
            fileName = "file.csv",
            triggeredBy = "u00002",
            countryCode = CountryCode("FR"),
            status = LoaderBatchStatus.RUNNING,
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            endDate = Instant.now().plusSeconds(180),
            totalContacts = 1
        )

        val customer = CustomerPayload(
            rowNumber = 1,
            crmData = CrmData(firstName = "Alice", surname = "Martin", email = "alice.martin@example.com"),
            clsData = emptyMap(),
            errorMessage = null
        )

        val crmResponse = CrmCustomerResponsePayload(
            crmAccountId = "SF12345",
            crmStatus = RecordStepStatus.OK
        )

        every { crmCustomerProviderSpi.createCrmCustomer(any()) } returns crmResponse
        every { crmClsCustomerDataRepositorySpi.save(any()) } answers { firstArg() }
        every { recordStepEventRepositorySpi.save(any()) } answers { firstArg() }
        every { batchRepositorySpi.save(any()) } answers { firstArg() }

        service.apply(batch, listOf(customer))

        verify(exactly = 1) { crmCustomerProviderSpi.createCrmCustomer(any()) }
        verify(exactly = 1) { crmClsCustomerDataRepositorySpi.save(any()) }
        verify(exactly = 1) {
            recordStepEventRepositorySpi.save(match {
                it.stepName == RecordStepName.SF_CREATE && it.stepStatus == RecordStepStatus.OK
            })
        }
        verify(exactly = 1) { batchRepositorySpi.save(loaderBatch = match { it.id == batch.id }) }
    }

    // -------------------------
    // 3️⃣ Update CRM : isUpdateRole
    // -------------------------
    @Test
    fun `it should update CRM customer and save event OK when isUpdateRole`() = runBlocking {
        val batch = LoaderBatch(
            id = "CCCC",
            reference = ReferenceId("REFUPDATE"),
            fileName = "file.csv",
            triggeredBy = "u00003",
            countryCode = CountryCode("FR"),
            status = LoaderBatchStatus.RUNNING,
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            endDate = Instant.now().plusSeconds(180),
            totalContacts = 1
        )

        val customer = CustomerPayload(
            rowNumber = 1,
            crmData = CrmData(firstName = "Bob", surname = "Dupuis"),
            clsData = emptyMap(),
            errorMessage = null
        )

        val crmResponse = CrmCustomerResponsePayload(
            crmAccountId = "SF9999",
            crmStatus = RecordStepStatus.OK
        )

        val savedCrmClsCustomerData = mockk<CrmClsCustomerData>(relaxed = true) {
            every { isUpdateRole() } returns true
        }

        every { service.processCustomerSavingInBlmStep(any()) } returns savedCrmClsCustomerData
        every { crmCustomerProviderSpi.updateCrmCustomer(any()) } returns crmResponse
        every { crmClsCustomerDataRepositorySpi.save(any()) } answers { firstArg() }
        every { recordStepEventRepositorySpi.save(any()) } answers { firstArg() }
        every { batchRepositorySpi.save(any()) } answers { firstArg() }

        service.apply(batch, listOf(customer))

        verify(exactly = 1) { crmCustomerProviderSpi.updateCrmCustomer(any()) }
        verify(exactly = 1) {
            recordStepEventRepositorySpi.save(match { it.stepName == RecordStepName.SF_UPDATE && it.stepStatus == RecordStepStatus.OK })
        }
        verify(exactly = 1) { batchRepositorySpi.save(loaderBatch = match { it.id == batch.id }) }
    }

    // -------------------------
    // 4️⃣ Création rôle : isCreateRole
    // -------------------------
    @Test
    fun `it should create CRM role and save event OK when isCreateRole`() = runBlocking {
        val batch = LoaderBatch(
            id = "DDDD",
            reference = ReferenceId("REFROLE"),
            fileName = "file.csv",
            triggeredBy = "u00004",
            countryCode = CountryCode("FR"),
            status = LoaderBatchStatus.RUNNING,
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            endDate = Instant.now().plusSeconds(180),
            totalContacts = 1
        )

        val customer = CustomerPayload(
            rowNumber = 1,
            crmData = CrmData(firstName = "Claire", surname = "Lemoine"),
            clsData = emptyMap(),
            errorMessage = null
        )

        val crmRoleResponse = CrmRoleResponsePayload(
            crmRoleId = "ROLE123",
            crmStatus = RecordStepStatus.OK
        )

        val savedCrmClsCustomerData = mockk<CrmClsCustomerData>(relaxed = true) {
            every { isCreateRole() } returns true
        }

        every { service.processCustomerSavingInBlmStep(any()) } returns savedCrmClsCustomerData
        every { crmCustomerProviderSpi.createCrmRole(any()) } returns crmRoleResponse
        every { crmClsCustomerDataRepositorySpi.save(any()) } answers { firstArg() }
        every { recordStepEventRepositorySpi.save(any()) } answers { firstArg() }
        every { batchRepositorySpi.save(any()) } answers { firstArg() }

        service.apply(batch, listOf(customer))

        verify(exactly = 1) { crmCustomerProviderSpi.createCrmRole(any()) }
        verify(exactly = 1) {
            recordStepEventRepositorySpi.save(match { it.stepName == RecordStepName.SF_CREATE_ROLE && it.stepStatus == RecordStepStatus.OK })
        }
        verify(exactly = 1) { batchRepositorySpi.save(loaderBatch = match { it.id == batch.id }) }
    }
}

        